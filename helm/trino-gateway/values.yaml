replicaCount: 1

image:
    repository: "trinodb/trino-gateway"
    pullPolicy: IfNotPresent
    # Override the image tag whose default is the chart appVersion.
    #tag: "10-SNAPSHOT"

    # For local testing
    #repository: "trino-gateway"
    #pullPolicy: IfNotPresent
    #tag: "8-SNAPSHOT"

imagePullSecrets: []

# Provide configuration for the Trino Gateway dataStore in dataStoreSecret. This node can
# be left undefined if dataStore is defined under the config node. For production deployments
# sensitive values should be stored in a Secret
dataStoreSecret:
    name: ""
    key: ""

# Provide configuration for the Trino Gateway backendState in backendStateSecret. This should
# be used with health check configurations that require backend credentials. This node can
# be left undefined if dataStore is defined under the config node.
backendStateSecret:
    name: ""
    key: ""

# Provide configuration for the Trino Gateway authentication configuration in authenticationSecret.
# This node can be left undefined if dataStore is defined under the config node.
authenticationSecret:
    name: ""
    key: ""

config:
    serverConfig:
        node.environment: test
        http-server.http.port: 8080
    dataStore:
        # The connection details for the backend database for Trino Gateway and Trino query history
        jdbcUrl: jdbc:postgresql://localhost:5432/gateway
        user: postgres
        password: mysecretpassword
        driver: org.postgresql.Driver
    clusterStatsConfiguration:
        monitorType: INFO_API
    modules:
        - io.trino.gateway.ha.module.HaGatewayProviderModule
        - io.trino.gateway.ha.module.ClusterStateListenerModule
        - io.trino.gateway.ha.module.ClusterStatsMonitorModule
    managedApps:
        - io.trino.gateway.ha.clustermonitor.ActiveClusterMonitor

# Startup command for Trino Gateway process. Add additional Java options and other modifications as desired.
command:
  - "java"
  - "-XX:MinRAMPercentage=80.0"
  - "-XX:MaxRAMPercentage=80.0"
  - "-jar"
  - "/usr/lib/trino/gateway-ha-jar-with-dependencies.jar"
  - "/etc/gateway/config.yaml"

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
 limits:
   cpu: 2
   memory: 4Gi
 requests:
   cpu: 2
   memory: 4Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  failureThreshold: 3
  timeoutSeconds: 1
  scheme: HTTP

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 12
  timeoutSeconds: 1
  scheme: HTTP

volumes: {}

volumeMounts: {}

nodeSelector: {}

tolerations: []

affinity: {}

# -- Labels that get applied to every resource's metadata
commonLabels: {}
  # example: "some label"

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
